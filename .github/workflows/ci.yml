name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}

    # Run each command in parallel with the same setup steps.
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
        config:
          # Specify names so that the GitHub branch protection settings for
          # required checks don't need to change if we ever change the commands used.
          - name: lint
            command: |
              # lint steps
              set -x
              yarn license-check
              yarn dedupe --check
              yarn run tsc --noEmit # typecheck files that are not included by webpack or package builds
              yarn run lint:ci
              yarn run lint:unused-exports
              yarn run lint:dependencies
          - name: packages
            command: yarn run build:packages
          - name: web
            command: yarn run web:build:prod
          - name: build benchmark
            command: yarn run benchmark:build:prod
          - name: test
            command: yarn run test --maxWorkers=100%
        include:
          - os: windows-2019
            config:
              name: packages
              command: echo complete

    name: ${{ matrix.config.name }} (${{ matrix.os }})

    steps:
      - uses: actions/checkout@v4.1.0
        with:
          lfs: true

      - uses: actions/setup-node@v3
        with:
          node-version: 16.17
      - run: corepack enable yarn

      - name: Restore cache
        uses: actions/cache@v3.3.2
        with:
          path: |
            .yarn/cache
            **/node_modules
          key: v5-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: v5-${{ runner.os }}-yarn-

      - run: yarn install --immutable

      - run: ${{ matrix.config.command }}

  integration:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]

    name: integration (${{ matrix.os }})

    steps:
      - uses: actions/checkout@v4.1.0
        with:
          lfs: true

      - uses: actions/setup-node@v3
        with:
          node-version: 16.17
      - run: corepack enable yarn

      - name: Restore cache
        uses: actions/cache@v3.3.2
        with:
          path: |
            .yarn/cache
            **/node_modules
          key: v5-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: v5-${{ runner.os }}-yarn-

      - run: yarn install --immutable

      - name: test:integration
        if: matrix.os == 'ubuntu-20.04'
        uses: GabrielBB/xvfb-action@v1
        with:
          working-directory: ./
          run: yarn run test:integration

      - name: test:web-integration
        if: matrix.os == 'ubuntu-20.04'
        run: yarn run test:web-integration

      - name: test:integration
        if: matrix.os != 'ubuntu-20.04'
        run: yarn run test:integration

  release:
    name: Publish to S3 and GHCR
    runs-on: ubuntu-20.04
    needs: [test, integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - uses: actions/setup-node@v3
        with:
          node-version: 16.17
      - run: corepack enable yarn

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .yarn/cache
            **/node_modules
          key: v5-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: v5-${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build
        run: yarn run web:build:prod

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Upload to S3
        env:
          S3_BUCKET: ${{ vars.S3_BUCKET }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws s3 sync web/.webpack s3://$S3_BUCKET --delete
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            latest

      - name: Configure QEMU
        uses: docker/setup-qemu-action@v2

      - name: Configure Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.ci
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
